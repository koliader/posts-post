// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  title,
  body,
  owner
) VALUES (
  $1, $2, $3
) RETURNING title, body, owner
`

type CreatePostParams struct {
	Title string `json:"title"`
	Body  string `json:"body"`
	Owner string `json:"owner"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.Title, arg.Body, arg.Owner)
	var i Post
	err := row.Scan(&i.Title, &i.Body, &i.Owner)
	return i, err
}

const getPostByTitle = `-- name: GetPostByTitle :one
SELECT title, body, owner FROM posts
WHERE title = $1
`

func (q *Queries) GetPostByTitle(ctx context.Context, title string) (Post, error) {
	row := q.db.QueryRow(ctx, getPostByTitle, title)
	var i Post
	err := row.Scan(&i.Title, &i.Body, &i.Owner)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT title, body, owner FROM posts
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(&i.Title, &i.Body, &i.Owner); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
